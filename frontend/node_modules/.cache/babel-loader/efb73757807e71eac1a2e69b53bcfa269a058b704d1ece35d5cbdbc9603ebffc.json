{"ast":null,"code":"var _jsxFileName = \"/Users/akshaj/Ai-code-reviewer/frontend/src/components/BookmarkManager.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { codeforcesAPI } from '../services/api';\n\n// const BookmarkManager = () => {\n//   const [bookmarks, setBookmarks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchBookmarks();\n//   }, []);\n\n//   const fetchBookmarks = async () => {\n//     try {\n//       const response = await codeforcesAPI.getBookmarks();\n//       setBookmarks(response.data.bookmarks || []);\n//     } catch (error) {\n//       console.error('Failed to fetch bookmarks:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   const removeBookmark = async (contestId, problemIndex) => {\n//     try {\n//       await codeforcesAPI.removeBookmark(contestId, problemIndex);\n//       setBookmarks(bookmarks.filter(b => \n//         !(b.contestId === contestId && b.problemIndex === problemIndex)\n//       ));\n//     } catch (error) {\n//       console.error('Failed to remove bookmark:', error);\n//     }\n//   };\n\n//   if (loading) return <div>Loading bookmarks...</div>;\n\n//   return (\n//     <div className=\"bookmark-manager\">\n//       <h3>Bookmarked Problems</h3>\n\n//       {bookmarks.length === 0 ? (\n//         <p>No bookmarks yet. Bookmark problems to see them here.</p>\n//       ) : (\n//         <div className=\"bookmarks-list\">\n//           {bookmarks.map(bookmark => (\n//             <div key={`${bookmark.contestId}-${bookmark.problemIndex}`} className=\"bookmark-item\">\n//               <div className=\"bookmark-info\">\n//                 <h4>{bookmark.problemName}</h4>\n//                 <p>Rating: {bookmark.problemRating} â€¢ {bookmark.problemTags.join(', ')}</p>\n//               </div>\n//               <div className=\"bookmark-actions\">\n//                 <a\n//                   href={`https://codeforces.com/problemset/problem/${bookmark.contestId}/${bookmark.problemIndex}`}\n//                   target=\"_blank\"\n//                   rel=\"noopener noreferrer\"\n//                   className=\"btn btn-secondary\"\n//                 >\n//                   Solve\n//                 </a>\n//                 <button\n//                   onClick={() => removeBookmark(bookmark.contestId, bookmark.problemIndex)}\n//                   className=\"btn btn-danger\"\n//                 >\n//                   Remove\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default BookmarkManager;\nimport React, { useState, useEffect } from 'react';\nimport { codeforcesAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookmarkManager = () => {\n  _s();\n  const [bookmarks, setBookmarks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // Add a state for error messages to show to the user\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchBookmarks();\n  }, []);\n  const fetchBookmarks = async () => {\n    try {\n      const response = await codeforcesAPI.getBookmarks();\n      setBookmarks(response.data.bookmarks || []);\n    } catch (error) {\n      console.error('Failed to fetch bookmarks:', error);\n      setError('Failed to load bookmarks.');\n    }\n    setLoading(false);\n  };\n  const removeBookmark = async (contestId, problemIndex) => {\n    // DEBUG 1: Log what we're trying to delete\n    console.log(\"Trying to remove:\", contestId, problemIndex);\n    try {\n      // DEBUG 2: Capture the API response\n      const response = await codeforcesAPI.removeBookmark(contestId, problemIndex);\n      console.log(\"Delete successful:\", response.data); // Should see { message: 'Bookmark removed successfully' }\n\n      // Update the UI on success\n      setBookmarks(bookmarks.filter(b => !(b.contestId === contestId && b.problemIndex === problemIndex)));\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$config, _error$response3, _error$response4;\n      // DEBUG 3: GREATLY ENHANCED ERROR LOGGING\n      console.error('DELETE Request Failed:');\n      console.error('- Full Error:', error);\n      console.error('- HTTP Status Code:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status); // e.g., 401, 404, 500\n      console.error('- Server Error Message:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error); // The message from your backend\n      console.error('- Request URL:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url); // The URL that was called\n\n      // Show a user-friendly error message based on the response\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        setError('Your session expired. Please log in again.');\n      } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n        setError('Bookmark not found. It may have already been deleted.');\n        // Optional: Remove it from the local state anyway to keep UI clean\n        setBookmarks(bookmarks.filter(b => !(b.contestId === contestId && b.problemIndex === problemIndex)));\n      } else {\n        var _error$response5, _error$response5$data;\n        // Show the server's error message or a generic one\n        setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to remove bookmark. Please try again.');\n      }\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading bookmarks...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bookmark-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Bookmarked Problems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        padding: '10px',\n        border: '1px solid red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this), bookmarks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookmarks yet. Bookmark problems to see them here.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookmarks-list\",\n      children: bookmarks.map(bookmark => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookmark-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookmark-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: bookmark.problemName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rating: \", bookmark.problemRating, \" \\u2022 \", bookmark.problemTags.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookmark-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://codeforces.com/problemset/problem/${bookmark.contestId}/${bookmark.problemIndex}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"btn btn-secondary\",\n            children: \"Solve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeBookmark(bookmark.contestId, bookmark.problemIndex),\n            className: \"btn btn-danger\",\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)]\n      }, `${bookmark.contestId}-${bookmark.problemIndex}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(BookmarkManager, \"XLZI1pC1Omk9xljWkpmj5xLHX48=\");\n_c = BookmarkManager;\nexport default BookmarkManager;\nvar _c;\n$RefreshReg$(_c, \"BookmarkManager\");","map":{"version":3,"names":["React","useState","useEffect","codeforcesAPI","jsxDEV","_jsxDEV","BookmarkManager","_s","bookmarks","setBookmarks","loading","setLoading","error","setError","fetchBookmarks","response","getBookmarks","data","console","removeBookmark","contestId","problemIndex","log","filter","b","_error$response","_error$response2","_error$response2$data","_error$config","_error$response3","_error$response4","status","config","url","_error$response5","_error$response5$data","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","color","padding","border","length","map","bookmark","problemName","problemRating","problemTags","join","href","target","rel","onClick","_c","$RefreshReg$"],"sources":["/Users/akshaj/Ai-code-reviewer/frontend/src/components/BookmarkManager.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { codeforcesAPI } from '../services/api';\n\n// const BookmarkManager = () => {\n//   const [bookmarks, setBookmarks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchBookmarks();\n//   }, []);\n\n//   const fetchBookmarks = async () => {\n//     try {\n//       const response = await codeforcesAPI.getBookmarks();\n//       setBookmarks(response.data.bookmarks || []);\n//     } catch (error) {\n//       console.error('Failed to fetch bookmarks:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   const removeBookmark = async (contestId, problemIndex) => {\n//     try {\n//       await codeforcesAPI.removeBookmark(contestId, problemIndex);\n//       setBookmarks(bookmarks.filter(b => \n//         !(b.contestId === contestId && b.problemIndex === problemIndex)\n//       ));\n//     } catch (error) {\n//       console.error('Failed to remove bookmark:', error);\n//     }\n//   };\n\n//   if (loading) return <div>Loading bookmarks...</div>;\n\n//   return (\n//     <div className=\"bookmark-manager\">\n//       <h3>Bookmarked Problems</h3>\n      \n//       {bookmarks.length === 0 ? (\n//         <p>No bookmarks yet. Bookmark problems to see them here.</p>\n//       ) : (\n//         <div className=\"bookmarks-list\">\n//           {bookmarks.map(bookmark => (\n//             <div key={`${bookmark.contestId}-${bookmark.problemIndex}`} className=\"bookmark-item\">\n//               <div className=\"bookmark-info\">\n//                 <h4>{bookmark.problemName}</h4>\n//                 <p>Rating: {bookmark.problemRating} â€¢ {bookmark.problemTags.join(', ')}</p>\n//               </div>\n//               <div className=\"bookmark-actions\">\n//                 <a\n//                   href={`https://codeforces.com/problemset/problem/${bookmark.contestId}/${bookmark.problemIndex}`}\n//                   target=\"_blank\"\n//                   rel=\"noopener noreferrer\"\n//                   className=\"btn btn-secondary\"\n//                 >\n//                   Solve\n//                 </a>\n//                 <button\n//                   onClick={() => removeBookmark(bookmark.contestId, bookmark.problemIndex)}\n//                   className=\"btn btn-danger\"\n//                 >\n//                   Remove\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default BookmarkManager;\nimport React, { useState, useEffect } from 'react';\nimport { codeforcesAPI } from '../services/api';\n\nconst BookmarkManager = () => {\n  const [bookmarks, setBookmarks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // Add a state for error messages to show to the user\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchBookmarks();\n  }, []);\n\n  const fetchBookmarks = async () => {\n    try {\n      const response = await codeforcesAPI.getBookmarks();\n      setBookmarks(response.data.bookmarks || []);\n    } catch (error) {\n      console.error('Failed to fetch bookmarks:', error);\n      setError('Failed to load bookmarks.');\n    }\n    setLoading(false);\n  };\n\n  const removeBookmark = async (contestId, problemIndex) => {\n    // DEBUG 1: Log what we're trying to delete\n    console.log(\"Trying to remove:\", contestId, problemIndex);\n\n    try {\n      // DEBUG 2: Capture the API response\n      const response = await codeforcesAPI.removeBookmark(contestId, problemIndex);\n      console.log(\"Delete successful:\", response.data); // Should see { message: 'Bookmark removed successfully' }\n\n      // Update the UI on success\n      setBookmarks(bookmarks.filter(b => \n        !(b.contestId === contestId && b.problemIndex === problemIndex)\n      ));\n\n    } catch (error) {\n      // DEBUG 3: GREATLY ENHANCED ERROR LOGGING\n      console.error('DELETE Request Failed:');\n      console.error('- Full Error:', error);\n      console.error('- HTTP Status Code:', error.response?.status); // e.g., 401, 404, 500\n      console.error('- Server Error Message:', error.response?.data?.error); // The message from your backend\n      console.error('- Request URL:', error.config?.url); // The URL that was called\n\n      // Show a user-friendly error message based on the response\n      if (error.response?.status === 401) {\n        setError('Your session expired. Please log in again.');\n      } else if (error.response?.status === 404) {\n        setError('Bookmark not found. It may have already been deleted.');\n        // Optional: Remove it from the local state anyway to keep UI clean\n        setBookmarks(bookmarks.filter(b => \n          !(b.contestId === contestId && b.problemIndex === problemIndex)\n        ));\n      } else {\n        // Show the server's error message or a generic one\n        setError(error.response?.data?.error || 'Failed to remove bookmark. Please try again.');\n      }\n    }\n  };\n\n  if (loading) return <div>Loading bookmarks...</div>;\n\n  return (\n    <div className=\"bookmark-manager\">\n      <h3>Bookmarked Problems</h3>\n      {/* Display error message to the user */}\n      {error && <div style={{ color: 'red', padding: '10px', border: '1px solid red' }}>{error}</div>}\n      \n      {bookmarks.length === 0 ? (\n        <p>No bookmarks yet. Bookmark problems to see them here.</p>\n      ) : (\n        <div className=\"bookmarks-list\">\n          {bookmarks.map(bookmark => (\n            <div key={`${bookmark.contestId}-${bookmark.problemIndex}`} className=\"bookmark-item\">\n              <div className=\"bookmark-info\">\n                <h4>{bookmark.problemName}</h4>\n                <p>Rating: {bookmark.problemRating} â€¢ {bookmark.problemTags.join(', ')}</p>\n              </div>\n              <div className=\"bookmark-actions\">\n                <a\n                  href={`https://codeforces.com/problemset/problem/${bookmark.contestId}/${bookmark.problemIndex}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"btn btn-secondary\"\n                >\n                  Solve\n                </a>\n                <button\n                  onClick={() => removeBookmark(bookmark.contestId, bookmark.problemIndex)}\n                  className=\"btn btn-danger\"\n                >\n                  Remove\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookmarkManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}