{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { userAPI } from '../services/api';\n// import { getUser } from '../services/auth';\n\n// const Profile = () => {\n//   const [userStats, setUserStats] = useState(null);\n//   const [attempts, setAttempts] = useState([]);\n//   const [userData, setUserData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchUserData();\n//   }, []);\n\n//   const fetchUserData = async () => {\n//     try {\n//       // Get user info from local storage/auth\n//       const currentUser = getUser();\n//       setUserData(currentUser);\n\n//       // Fetch stats and attempts from API\n//       const [statsResponse, attemptsResponse] = await Promise.all([\n//         userAPI.getStats(),\n//         userAPI.getAttempts()\n//       ]);\n\n//       setUserStats(statsResponse.data);\n//       setAttempts(attemptsResponse.data.attempts || []);\n//     } catch (error) {\n//       console.error('Failed to fetch user data:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   if (loading) {\n//     return <div className=\"loading\">Loading profile...</div>;\n//   }\n\n//   return (\n//     <div className=\"profile-page\">\n//       <div className=\"profile-header\">\n//         <h1>Your Profile</h1>\n//         <p>Track your progress and coding statistics</p>\n//       </div>\n\n//       {/* User Info Section with Avatar */}\n//       {userData && (\n//         <div className=\"user-info-section\">\n//           <div className=\"user-profile-card\">\n//             <div className=\"user-avatar-container\">\n//               {userData.avatar ? (\n//                 <img \n//                   src={userData.avatar} \n//                   alt={userData.name}\n//                   className=\"user-avatar-large\"\n//                   onError={(e) => {\n//                     e.target.style.display = 'none';\n//                     e.target.nextSibling.style.display = 'block';\n//                   }}\n//                 />\n//               ) : null}\n//               <div className=\"avatar-placeholder\" style={{ display: userData.avatar ? 'none' : 'block' }}>\n//                 {userData.name ? userData.name.charAt(0).toUpperCase() : 'U'}\n//               </div>\n//             </div>\n//             <div className=\"user-details\">\n//               <h2>{userData.name || 'User'}</h2>\n//               <p className=\"user-email\">{userData.email || 'No email available'}</p>\n//               <p className=\"member-since\">\n//                 Member since: {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n//               </p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {userStats && (\n//         <div className=\"stats-section\">\n//           <h2>Performance Statistics</h2>\n//           <div className=\"stats-grid\">\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">üìä</div>\n//               <h3>Total Attempts</h3>\n//               <p className=\"stat-number\">{userStats.stats?.totalAttempts || 0}</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">‚úÖ</div>\n//               <h3>Solved Problems</h3>\n//               <p className=\"stat-number\">{userStats.stats?.solvedProblems || 0}</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">üìà</div>\n//               <h3>Success Rate</h3>\n//               <p className=\"stat-number\">{userStats.stats?.successRate || 0}%</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">‚è±Ô∏è</div>\n//               <h3>Average Time</h3>\n//               <p className=\"stat-number\">{userStats.stats?.avgTime || 0}m</p>\n//             </div>\n//           </div>\n\n//           {/* Top Tags */}\n//           {userStats.byTag && Object.keys(userStats.byTag).length > 0 && (\n//             <div className=\"top-tags-section\">\n//               <h3>Performance by Tags</h3>\n//               <div className=\"tags-stats\">\n//                 {Object.entries(userStats.byTag)\n//                   .sort(([,a], [,b]) => b.attempted - a.attempted)\n//                   .slice(0, 6)\n//                   .map(([tag, data]) => (\n//                     <div key={tag} className=\"tag-stat-item\">\n//                       <span className=\"tag-name\">{tag}</span>\n//                       <span className=\"tag-numbers\">\n//                         {data.solved}/{data.attempted} solved\n//                       </span>\n//                       <div className=\"tag-progress\">\n//                         <div \n//                           className=\"progress-bar\"\n//                           style={{ \n//                             width: `${data.attempted > 0 ? (data.solved / data.attempted) * 100 : 0}%` \n//                           }}\n//                         ></div>\n//                       </div>\n//                     </div>\n//                   ))}\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       )}\n\n//       <div className=\"attempts-section\">\n//         <h2>Recent Activity</h2>\n//         {attempts.length > 0 ? (\n//           <div className=\"attempts-list\">\n//             {attempts.slice(0, 10).map(attempt => (\n//               <div key={attempt._id} className=\"attempt-card\">\n//                 <div className=\"attempt-header\">\n//                   <h4>{attempt.problemName}</h4>\n//                   <span className={`status ${attempt.solved ? 'solved' : 'unsolved'}`}>\n//                     {attempt.solved ? '‚úÖ Solved' : '‚ùå Unsolved'}\n//                   </span>\n//                 </div>\n//                 <div className=\"attempt-details\">\n//                   <span className=\"rating\">Rating: {attempt.problemRating || 'N/A'}</span>\n//                   <span className=\"time\">Time: {attempt.timeTaken || 'N/A'}m</span>\n//                   <span className=\"language\">Language: {attempt.language || 'N/A'}</span>\n//                   <span className=\"date\">\n//                     {new Date(attempt.attemptDate).toLocaleDateString()}\n//                   </span>\n//                 </div>\n//                 <div className=\"problem-tags\">\n//                   {attempt.problemTags?.map(tag => (\n//                     <span key={tag} className=\"tag\">{tag}</span>\n//                   ))}\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         ) : (\n//           <div className=\"no-attempts\">\n//             <p>No attempts yet. Start solving problems to see your progress!</p>\n//             <a href=\"/\" className=\"btn btn-primary\">Start Solving</a>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Profile;","map":{"version":3,"names":[],"sources":["/Users/akshaj/Ai-code-reviewer/frontend/src/pages/Profile.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { userAPI } from '../services/api';\n// import { getUser } from '../services/auth';\n\n// const Profile = () => {\n//   const [userStats, setUserStats] = useState(null);\n//   const [attempts, setAttempts] = useState([]);\n//   const [userData, setUserData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchUserData();\n//   }, []);\n\n//   const fetchUserData = async () => {\n//     try {\n//       // Get user info from local storage/auth\n//       const currentUser = getUser();\n//       setUserData(currentUser);\n      \n//       // Fetch stats and attempts from API\n//       const [statsResponse, attemptsResponse] = await Promise.all([\n//         userAPI.getStats(),\n//         userAPI.getAttempts()\n//       ]);\n      \n//       setUserStats(statsResponse.data);\n//       setAttempts(attemptsResponse.data.attempts || []);\n//     } catch (error) {\n//       console.error('Failed to fetch user data:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   if (loading) {\n//     return <div className=\"loading\">Loading profile...</div>;\n//   }\n\n//   return (\n//     <div className=\"profile-page\">\n//       <div className=\"profile-header\">\n//         <h1>Your Profile</h1>\n//         <p>Track your progress and coding statistics</p>\n//       </div>\n\n//       {/* User Info Section with Avatar */}\n//       {userData && (\n//         <div className=\"user-info-section\">\n//           <div className=\"user-profile-card\">\n//             <div className=\"user-avatar-container\">\n//               {userData.avatar ? (\n//                 <img \n//                   src={userData.avatar} \n//                   alt={userData.name}\n//                   className=\"user-avatar-large\"\n//                   onError={(e) => {\n//                     e.target.style.display = 'none';\n//                     e.target.nextSibling.style.display = 'block';\n//                   }}\n//                 />\n//               ) : null}\n//               <div className=\"avatar-placeholder\" style={{ display: userData.avatar ? 'none' : 'block' }}>\n//                 {userData.name ? userData.name.charAt(0).toUpperCase() : 'U'}\n//               </div>\n//             </div>\n//             <div className=\"user-details\">\n//               <h2>{userData.name || 'User'}</h2>\n//               <p className=\"user-email\">{userData.email || 'No email available'}</p>\n//               <p className=\"member-since\">\n//                 Member since: {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n//               </p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {userStats && (\n//         <div className=\"stats-section\">\n//           <h2>Performance Statistics</h2>\n//           <div className=\"stats-grid\">\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">üìä</div>\n//               <h3>Total Attempts</h3>\n//               <p className=\"stat-number\">{userStats.stats?.totalAttempts || 0}</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">‚úÖ</div>\n//               <h3>Solved Problems</h3>\n//               <p className=\"stat-number\">{userStats.stats?.solvedProblems || 0}</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">üìà</div>\n//               <h3>Success Rate</h3>\n//               <p className=\"stat-number\">{userStats.stats?.successRate || 0}%</p>\n//             </div>\n//             <div className=\"stat-card\">\n//               <div className=\"stat-icon\">‚è±Ô∏è</div>\n//               <h3>Average Time</h3>\n//               <p className=\"stat-number\">{userStats.stats?.avgTime || 0}m</p>\n//             </div>\n//           </div>\n\n//           {/* Top Tags */}\n//           {userStats.byTag && Object.keys(userStats.byTag).length > 0 && (\n//             <div className=\"top-tags-section\">\n//               <h3>Performance by Tags</h3>\n//               <div className=\"tags-stats\">\n//                 {Object.entries(userStats.byTag)\n//                   .sort(([,a], [,b]) => b.attempted - a.attempted)\n//                   .slice(0, 6)\n//                   .map(([tag, data]) => (\n//                     <div key={tag} className=\"tag-stat-item\">\n//                       <span className=\"tag-name\">{tag}</span>\n//                       <span className=\"tag-numbers\">\n//                         {data.solved}/{data.attempted} solved\n//                       </span>\n//                       <div className=\"tag-progress\">\n//                         <div \n//                           className=\"progress-bar\"\n//                           style={{ \n//                             width: `${data.attempted > 0 ? (data.solved / data.attempted) * 100 : 0}%` \n//                           }}\n//                         ></div>\n//                       </div>\n//                     </div>\n//                   ))}\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       )}\n\n//       <div className=\"attempts-section\">\n//         <h2>Recent Activity</h2>\n//         {attempts.length > 0 ? (\n//           <div className=\"attempts-list\">\n//             {attempts.slice(0, 10).map(attempt => (\n//               <div key={attempt._id} className=\"attempt-card\">\n//                 <div className=\"attempt-header\">\n//                   <h4>{attempt.problemName}</h4>\n//                   <span className={`status ${attempt.solved ? 'solved' : 'unsolved'}`}>\n//                     {attempt.solved ? '‚úÖ Solved' : '‚ùå Unsolved'}\n//                   </span>\n//                 </div>\n//                 <div className=\"attempt-details\">\n//                   <span className=\"rating\">Rating: {attempt.problemRating || 'N/A'}</span>\n//                   <span className=\"time\">Time: {attempt.timeTaken || 'N/A'}m</span>\n//                   <span className=\"language\">Language: {attempt.language || 'N/A'}</span>\n//                   <span className=\"date\">\n//                     {new Date(attempt.attemptDate).toLocaleDateString()}\n//                   </span>\n//                 </div>\n//                 <div className=\"problem-tags\">\n//                   {attempt.problemTags?.map(tag => (\n//                     <span key={tag} className=\"tag\">{tag}</span>\n//                   ))}\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         ) : (\n//           <div className=\"no-attempts\">\n//             <p>No attempts yet. Start solving problems to see your progress!</p>\n//             <a href=\"/\" className=\"btn btn-primary\">Start Solving</a>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Profile;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}