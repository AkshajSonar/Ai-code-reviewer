{"ast":null,"code":"var _jsxFileName = \"/Users/akshaj/Ai-code-reviewer/frontend/src/pages/ProblemSolve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport CodeEditor from '../components/CodeEditor';\nimport ProblemDisplay from '../components/ProblemDisplay';\nimport ReviewResults from '../components/ReviewResults';\nimport { codeforcesAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProblemSolve = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [problem, setProblem] = useState(null);\n  const [review, setReview] = useState(null);\n  const [userCode, setUserCode] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchProblem = async () => {\n      const contestId = searchParams.get('contestId');\n      const problemIndex = searchParams.get('index');\n      const problemName = searchParams.get('problem');\n      if (contestId && problemIndex) {\n        setLoading(true);\n        try {\n          // For now, we'll create a mock problem object\n          // In a real app, you'd fetch from your backend\n          setProblem({\n            contestId,\n            index: problemIndex,\n            name: problemName || `Problem ${contestId}${problemIndex}`,\n            tags: ['algorithm', 'coding'],\n            rating: 1500\n          });\n        } catch (error) {\n          console.error('Failed to fetch problem:', error);\n        }\n        setLoading(false);\n      }\n    };\n    fetchProblem();\n  }, [searchParams]);\n  const handleReviewComplete = (reviewText, code) => {\n    setReview(reviewText);\n    setUserCode(code);\n  };\n  const handleTryAnother = () => {\n    setReview(null);\n    setUserCode('');\n    window.location.href = '/';\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading problem...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"problem-solve-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solve-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Solve Coding Problem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Write your solution and get instant AI feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solve-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"problem-column\",\n        children: /*#__PURE__*/_jsxDEV(ProblemDisplay, {\n          problem: problem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-column\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          problem: problem,\n          onReviewComplete: handleReviewComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), review && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"review-column\",\n        children: /*#__PURE__*/_jsxDEV(ReviewResults, {\n          review: review,\n          code: userCode,\n          problem: problem,\n          onTryAnother: handleTryAnother\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ProblemSolve, \"153gwMf1SYEv5y4JVvVYKjoyBPY=\", false, function () {\n  return [useSearchParams];\n});\n_c = ProblemSolve;\nexport default ProblemSolve;\nvar _c;\n$RefreshReg$(_c, \"ProblemSolve\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","CodeEditor","ProblemDisplay","ReviewResults","codeforcesAPI","jsxDEV","_jsxDEV","ProblemSolve","_s","searchParams","problem","setProblem","review","setReview","userCode","setUserCode","loading","setLoading","fetchProblem","contestId","get","problemIndex","problemName","index","name","tags","rating","error","console","handleReviewComplete","reviewText","code","handleTryAnother","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onReviewComplete","onTryAnother","_c","$RefreshReg$"],"sources":["/Users/akshaj/Ai-code-reviewer/frontend/src/pages/ProblemSolve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport CodeEditor from '../components/CodeEditor';\nimport ProblemDisplay from '../components/ProblemDisplay';\nimport ReviewResults from '../components/ReviewResults';\nimport { codeforcesAPI } from '../services/api';\n\nconst ProblemSolve = () => {\n  const [searchParams] = useSearchParams();\n  const [problem, setProblem] = useState(null);\n  const [review, setReview] = useState(null);\n  const [userCode, setUserCode] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchProblem = async () => {\n      const contestId = searchParams.get('contestId');\n      const problemIndex = searchParams.get('index');\n      const problemName = searchParams.get('problem');\n\n      if (contestId && problemIndex) {\n        setLoading(true);\n        try {\n          // For now, we'll create a mock problem object\n          // In a real app, you'd fetch from your backend\n          setProblem({\n            contestId,\n            index: problemIndex,\n            name: problemName || `Problem ${contestId}${problemIndex}`,\n            tags: ['algorithm', 'coding'],\n            rating: 1500\n          });\n        } catch (error) {\n          console.error('Failed to fetch problem:', error);\n        }\n        setLoading(false);\n      }\n    };\n\n    fetchProblem();\n  }, [searchParams]);\n\n  const handleReviewComplete = (reviewText, code) => {\n    setReview(reviewText);\n    setUserCode(code);\n  };\n\n  const handleTryAnother = () => {\n    setReview(null);\n    setUserCode('');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading problem...</div>;\n  }\n\n  return (\n    <div className=\"problem-solve-page\">\n      <div className=\"solve-header\">\n        <h1>Solve Coding Problem</h1>\n        <p>Write your solution and get instant AI feedback</p>\n      </div>\n\n      <div className=\"solve-content\">\n        <div className=\"problem-column\">\n          <ProblemDisplay problem={problem} />\n        </div>\n\n        <div className=\"editor-column\">\n          <CodeEditor \n            problem={problem}\n            onReviewComplete={handleReviewComplete}\n          />\n        </div>\n\n        {review && (\n          <div className=\"review-column\">\n            <ReviewResults \n              review={review}\n              code={userCode}\n              problem={problem}\n              onTryAnother={handleTryAnother}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProblemSolve;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}