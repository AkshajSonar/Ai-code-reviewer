{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle response errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const authAPI = {\n  loginWithToken: token => api.post('/auth/token', {\n    token: 'test-token'\n  }),\n  getMe: () => api.get('/auth/me'),\n  logout: () => api.get('/auth/logout')\n};\nexport const codeforcesAPI = {\n  getProblems: (tags, rating) => {\n    const params = {};\n    if (tags) {\n      if (Array.isArray(tags) && tags.length > 0) {\n        params.tags = tags.join(';');\n      } else if (typeof tags === 'string') {\n        params.tags = tags;\n      }\n    }\n    if (rating) {\n      params.rating = rating;\n    }\n    return api.get('/api/codeforces/problems', {\n      params\n    });\n  },\n  getRandomProblem: (tags, rating) => {\n    const params = {};\n    if (tags) {\n      if (Array.isArray(tags) && tags.length > 0) {\n        params.tags = tags.join(';');\n      } else if (typeof tags === 'string') {\n        params.tags = tags;\n      }\n    }\n    if (rating) {\n      params.rating = rating;\n    }\n    return api.get('/api/codeforces/problems/random', {\n      params\n    });\n  },\n  saveAttempt: data => api.post('/api/codeforces/attempt', data),\n  bookmarkProblem: data => api.post('/api/codeforces/bookmark', data),\n  getBookmarks: () => api.get('/api/codeforces/bookmarks'),\n  removeBookmark: (contestId, problemIndex) => api.delete(`/api/codeforces/bookmark/${contestId}/${problemIndex}`)\n};\nexport const geminiAPI = {\n  codeReview: data => api.post('/api/gemini/review', data),\n  codeExplanation: data => api.post('/api/gemini/explain', data)\n};\nexport const userAPI = {\n  getStats: () => api.get('/api/users/stats'),\n  getSolvedProblems: params => api.get('/api/users/solved', {\n    params\n  }),\n  getProblemAttempt: (contestId, problemIndex) => api.get(`/api/users/attempt/${contestId}/${problemIndex}`),\n  getUserCode: (contestId, problemIndex) => api.get(`/api/users/code/${contestId}/${problemIndex}`),\n  getAIReview: (contestId, problemIndex) => api.get(`/api/users/review/${contestId}/${problemIndex}`),\n  getChartData: () => api.get('/api/users/chart-data'),\n  updatePreferences: data => api.put('/api/users/preferences', data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","loginWithToken","post","getMe","get","logout","codeforcesAPI","getProblems","tags","rating","params","Array","isArray","length","join","getRandomProblem","saveAttempt","data","bookmarkProblem","getBookmarks","removeBookmark","contestId","problemIndex","delete","geminiAPI","codeReview","codeExplanation","userAPI","getStats","getSolvedProblems","getProblemAttempt","getUserCode","getAIReview","getChartData","updatePreferences","put"],"sources":["/Users/akshaj/Ai-code-reviewer/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle response errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API endpoints\nexport const authAPI = {\n  loginWithToken: (token) => api.post('/auth/token', { token: 'test-token' }),\n  getMe: () => api.get('/auth/me'),\n  logout: () => api.get('/auth/logout'),\n};\n\nexport const codeforcesAPI = {\n  getProblems: (tags, rating) => {\n    const params = {};\n    \n    if (tags) {\n      if (Array.isArray(tags) && tags.length > 0) {\n        params.tags = tags.join(';');\n      } else if (typeof tags === 'string') {\n        params.tags = tags;\n      }\n    }\n    \n    if (rating) {\n      params.rating = rating;\n    }\n    \n    return api.get('/api/codeforces/problems', { params });\n  },\n  \n  getRandomProblem: (tags, rating) => {\n    const params = {};\n    \n    if (tags) {\n      if (Array.isArray(tags) && tags.length > 0) {\n        params.tags = tags.join(';');\n      } else if (typeof tags === 'string') {\n        params.tags = tags;\n      }\n    }\n    \n    if (rating) {\n      params.rating = rating;\n    }\n    \n    return api.get('/api/codeforces/problems/random', { params });\n  },\n  \n  saveAttempt: (data) => api.post('/api/codeforces/attempt', data),\n  bookmarkProblem: (data) => api.post('/api/codeforces/bookmark', data),\n  getBookmarks: () => api.get('/api/codeforces/bookmarks'),\n  removeBookmark: (contestId, problemIndex) => api.delete(`/api/codeforces/bookmark/${contestId}/${problemIndex}`),\n};\n\nexport const geminiAPI = {\n  codeReview: (data) => api.post('/api/gemini/review', data),\n  codeExplanation: (data) => api.post('/api/gemini/explain', data),\n};\n\nexport const userAPI = {\n  getStats: () => api.get('/api/users/stats'),\n  getSolvedProblems: (params) => api.get('/api/users/solved', { params }),\n  getProblemAttempt: (contestId, problemIndex) => api.get(`/api/users/attempt/${contestId}/${problemIndex}`),\n  getUserCode: (contestId, problemIndex) => api.get(`/api/users/code/${contestId}/${problemIndex}`),\n  getAIReview: (contestId, problemIndex) => api.get(`/api/users/review/${contestId}/${problemIndex}`),\n  getChartData: () => api.get('/api/users/chart-data'),\n  updatePreferences: (data) => api.put('/api/users/preferences', data),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}